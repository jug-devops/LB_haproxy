global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon
        description Titre de notre haproxy

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

##################  Affichage des stats sur l'interface web de haproxy    #################################""
listen stats
    bind *:9000
    stats enable
    stats uri /stats
    stats refresh 2s
    stats auth jugurta:password
#Pour l'administration de l'interface haproxy (sortir un serveur du LB ou autre) on ajoute ce bloc
    stats show-desc
	stats show-legends
	stats admin if TRUE
##########################################################  Ce bloc permet de nous donner la main sur l'interface haproxy


#######  Test de Load Balancing between two servers #####
frontend myapp_front
	bind *:8080
	default_backend myapp_back
#LoadBalancer
backend myapp_back
	server apache 172.24.64.115:80
	server python 172.24.64.116:80
############################################################ Ce bloc nous permet de load balancer entre les deux serveurs



####################### Forward for (récuperer IP visiteur)  ###########################
frontend myapp_front
    bind *:8000
    mode http
    default_backend load 
    http-request set-header Forwarded for=%[src]
backend load
    server load1 172.24.64.115:8000
############################################################### Ce bloc nous permet de récupèrer l'ip du visiteur du site 172.24.64.115



#####################  Statistiques et interface haproxy #######################
frontend myapp_front
    description Front de haproxy.jug.lb1 et haproxy.jug.lb2
    bind *:5000
    mode http

    acl myapp_front1 hdr_dom(host) -i loadbalancer1.fr
    use_backend load1 if myapp_front1
    
    acl myapp_front2 hdr_dom(host) -i loadbalancer2.fr
    use_backend load2 if myapp_front2

backend load1
    description Serveur mediawiki 190
    server serv_wiki 172.24.64.190:80 

backend load2
    description Mes deux serveurs apache
    server serv_apache1 172.24.64.115:80
    server serv_apache2 172.24.64.116:80
############################################################################### Ce bloc nous permet d'affucher les stats sur l'interface haproxy


############### Matching d'url (path) routing   #############
frontend path_app
	bind *:8000
	mode http
# Créer le repertoire /stats/infos/page.html sur 116 et /path/vers/page.html sur 115
	acl is_match path_dir -i /infos   #Pour un repertoire contenant /infos
    #acl is_match path_beg -i /stats   Pour un directory commançant par stats
	use_backend loadpath2 if is_match

	default_backend loadpath1

backend loadpath1
	server apache1 172.24.64.115:8000
backend loadpath2
	server apache2 172.24.64.116:8000
############################################################# Ce bloc nous montre comment faire une redirection selon le path vers serveur 1 ou 2


#########################   Keepalived   ##########################
# Keepalived qui permet de gerer la VIP entre 2 serveurs
# Ajouter les lignes suivantes dans /etc/sysctl.conf des deux serveurs (115 et 116) et appliquer les moodification avec sysctl -p /etc/sysctl.conf
#net.ipv4.ip_nonlocal_bind = 1
#net.ipv4.conf.all.arp_announce = 2
#net.ipv4.conf.all.arp_ignore = 1
#net.ipv4.ip_forward = 1

############### Certificat sur HAPROXY  ###############  Depuis le serveur haproxy nous sommes redirigés vers une connexion sécurisée sur les noeuds 115/116
frontend Certificate
  bind *:8080
  bind *:443 ssl crt /etc/ssl/jugurta/jugurta.pem no-sslv3
  redirect scheme https if !{ ssl_fc}
  mode http
  default_backend my_back

backend my_back
  server apache1 172.24.64.115:80
  server apache2 172.24.64.116:80
############################################################

############## Certificat apache en mode TCP   ################
#Installer apache sur VM1 et Haproxy sur VM 2
#Sur VM1 (configuration à appliquer sur la machine 190 qui sera notre haproxy pour cet exemple)
    #Créer un certificat: openssl req -x509 -newkey rsa:2048 -keyout juug.key -out juug.crt -days 365 -nodes
    #copier les fichiers dans 
    #Configurer le apache /etc/ssl/apache/
            #port:443
            #SSLEngine on
        	#SSLCertificateFile /etc/ssl/apache/juug.crt
        	#SSLCertificatekeyFile /etc/ssl/apache/juug.key
    # Restart apache
#Sur VM2 (Haproxy)
frontend Certificate_tcp
	bind *:443
	mode tcp
	default_backend serveur_116

backend serveur_116
	mode tcp
	server serv116 172.24.64.116:443

###########Certificat apache HTTPS ############# Méthode de réencryption
# Garder les même étapes qu'avant en plus générer le .pem cat juug.key juug.crt /etc/ssl/jugurta/jugurta.pem et les mettre dans /etc/ssl/jugurta

frontend Certificate_http
  bind *:8080
  bind *:443 ssl crt /etc/ssl/jugurta/jugurta.pem no-sslv3
  redirect scheme https if !{ ssl_fc }
  mode http
  default_backend serv_116

backend serv_116
  mode http
  server apache116 172.24.64.116:443 check ssl verify none # None car on utilise un certificat auto-signé (true si un vrai certificat)
############################################################################